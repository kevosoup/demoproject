'use strict';

// modules
var gulp = require('gulp'),
	gulpif = require('gulp-if'),
	runSequence = require('run-sequence'),
	fs = require('fs'),
	gulpconcat = require('gulp-concat'),
	watch = require('gulp-watch'),
	gutil = require('gulp-util'),
	sass = require('gulp-ruby-sass'),
	sourcemaps = require('gulp-sourcemaps'),
	prefix = require('gulp-autoprefixer'),
	browserSync = require('browser-sync').create(),
	exec = require('child_process').exec,
	stylemack = require('stylemack');
// var exec = require('child_process').exec;
// var replace = require('gulp-replace');
// var cssimport = require("gulp-cssimport");
// var uncss = require("gulp-uncss");

// configuration
var config = {
	dev: gutil.env.dev,
	src: {
		colors: {
			src: './src/scss/01-brand/colors.json',
			dist: './src/scss/01-brand/'
		},
		styles: {
			core: './src/scss/*.scss',
			dist: './src/assets/'
			// core: './src/**/*.scss'
		},
		fonts: {
			// src: './src/assets/fonts/**/*.{svg,eot,ttf,woff}',
			src: './src/assets/fonts/**/*',
			dist: '_dist/assets/fonts/'
		},
		html: {
			// src: './src/assets/fonts/**/*.{svg,eot,ttf,woff}',
			src: './src/*.html',
			dist: '_dist/'
		}
	},
	dest: '_dist'
};


// colors
// pulls JSON data and creates Sass color variables
gulp.task('colors', function() {
	var contents = require(config.src.colors.src),
		startMessage = '////////////////////////////////////////////////////////////////////////\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// !!!! WARNING !!!! \n// THIS FILE (`' + config.src.colors.dist + '`)\n// IS GENERATED BY `' + config.src.colors.src + '` DO NOT EDIT THIS FILE \n// !!!! WARNING !!!!\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n////////////////////////////////////////////////////////////////////////\n\n\n',
		intromsg = startMessage,
		obj = intromsg,
		extendobj,
		toTitleCase = function (str) {
			return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
		}


	fs.readFile(config.src.colors.src, function (err, contents) {
	  if (err) throw err;

		var data = JSON.parse(contents),
			brands = data.brands,
			brandslength = brands.length;

		for (var x = 0; x < brandslength; x++) {

			var colors = brands[x].colors,
				colorlength = colors.length,
				folderName = brands[x].src;


			for (var y = 0; y < colorlength; y++) {
				var color = colors[y],
					children = colors[y].extended,
					childrenlength = (children) ? children.length : 0,
					variablename = "",
					nameOnly = color.name.replace("color-","");


				obj += "$" + color.name +
					   ": " + color.value + ";\n";

				if (childrenlength > 0) {
					for (var z = 0; z < childrenlength; z++) {
						obj += '$' + children[z] + ": " + "$" + color.name + ";\n";

						if (z >= (childrenlength - 1)) {
							obj += "\n"
						}
					}
				} else {
					obj += "\n"
				}

			}

			obj += "\n\n\n$palette: (\n";

			colors = colors.filter(color => color.palette )


			for (var a = 0; a < colors.length; a++) {
				var color = colors[a];

					obj += "    \"" + color.name.replace("color-", "") + "\": (\"#{$" + color.name + "}\", \"#{$" + color.name + "-contrast}\")";

					if(colors.length -1  > a) {
						obj += ", \n";
					}

			}

			obj += "\n); \n\n\n\n" + intromsg;


			fs.writeFile(config.src.colors.dist + folderName + '/_00-settings_colors.scss', obj);

			intromsg = startMessage;
			obj = intromsg;
		}
	});


	fs.readFile(config.src.colors.src, function (err, contents) {
	  if (err) throw err;

		var data = JSON.parse(contents),
			brands = data.brands,
			brandslength = brands.length,
			documentation = "";

		for (var x = 0; x < brandslength; x++) {

			var colors = brands[x].colors,
				colorlength = colors.length,
				brandName = brands[x].name,
				folderName = brands[x].src;


			for (var y = 0; y < colorlength; y++) {
				var color = colors[y],
					children = colors[y].extended,
					childrenlength = (children) ? children.length : 0,
					variablename = "",
					nameOnly = color.name.replace("color-","");



				obj = "";


					obj += `
	Extended variables:
	`;
					for (var z = 0; z < childrenlength; z++) {
						obj += `
	* `+"`$" + children[z]+"`";
					}

					obj += `
	`;
					documentation += `
/*

---
name: Color > `+ brandName +` > `+toTitleCase(color.name.replace(/color-/g,"").replace(/-/g," "))+`
category: 6. Trumps > Colors "`+ brandName +`"
---

* Color: `+"`"+color.value+"`"+`
* Color variable: `+"`$"+color.name+"`"+`
* Contrast variable: `+"`$"+color.name+"-contrast`"+`
`+obj+`
Versions:

* Background class: `+"`"+`.u-`+nameOnly+`-bg`+"`"+`
* Background class (no `+"`color`"+` property): `+"`"+`.u-color-`+nameOnly+`-bg`+"`"+`
* Color: `+"`"+`.u-`+nameOnly+``+"`"+`
* Color `+"`"+`:before`+"`"+` class: `+"`"+`.u-`+nameOnly+`-before`+"`"+`
* Color `+"`"+`:after`+"`"+` class: `+"`"+`.u-`+nameOnly+`-after`+"`"+`

`+"```"+`bg.html
	<span class="stylemack-demo-only-class--color-bg ** u-`+nameOnly+`-bg **">
		`+ nameOnly +`
	</span>
`+"```"+`

`+"```"+`color-bg.html
	<span class="stylemack-demo-only-class--color-bg ** u-color-`+nameOnly+`-bg **">
		`+ nameOnly +`
	</span>
`+"```"+`

`+"```"+`color.html
	<span class="stylemack-demo-only-class--color-bg ** u-`+nameOnly+` **">
		`+ nameOnly +`
	</span>
`+"```"+`

`+"```"+`before.html
	<span data-icon="X" class="stylemack-demo-only-class--color-bg u-glyph-before ** u-`+nameOnly+`-before **">
		`+ nameOnly +`
	</span>
`+"```"+`

`+"```"+`after.html
	<span data-icon="X" class="stylemack-demo-only-class--color-bg u-glyph-after ** u-`+nameOnly+`-after **">
		`+ nameOnly +`
	</span>
`+"```"+`

*/
				`;





			}

		}


		obj =  intromsg + documentation + "\n\n\n\n" + intromsg;


		fs.writeFile("./src/scss/_documentation-colors.scss", obj);
	});
});


gulp.task('stylemack', function () {
	stylemack({
	    input: 'src/scss',
	    output: '_documentation',
	    configPath: '.stylemack.yml',
	});
})

// make CSS from Sass
gulp.task('sass', function () {
	return sass(config.src.styles.core, {
    	})
        .on('error', function (err) {
            console.error('Error!', err.message);
        })
        .pipe(prefix('last 3 version'))
   		.pipe(gulpif((config.dev && !config.simple), sourcemaps.write('maps', {
	        includeContent: false,
	        sourceRoot: '.'
	    })))
   		// .pipe(gulpif(!config.dev, csso()))
   		// .pipe(gulpif(!config.dev, csscomb()))
        .pipe(gulp.dest('_dist/assets/styles'));
        // .pipe(gulpif(config.dev, reload({stream:true})));
});


gulp.task('sass:documentation', function () {
	return sass(config.src.styles.core, {
    	})
        .on('error', function (err) {
            console.error('Error!', err.message);
        })
        .pipe(prefix('last 3 version'))
   		.pipe(gulpif((config.dev && !config.simple), sourcemaps.write('maps', {
	        includeContent: false,
	        sourceRoot: '.'
	    })))
   		// .pipe(gulpif(!config.dev, csso()))
   		// .pipe(gulpif(!config.dev, csscomb()))
        .pipe(gulp.dest('_documentation'));
        // .pipe(gulpif(config.dev, reload({stream:true})));
});


// fonts
gulp.task('fonts', function() {
	return gulp.src(config.src.fonts.src)
		.pipe(gulp.dest(config.src.fonts.dist + "/"));
});


// Static Server + watching scss/html files
gulp.task('serve', function() {
    browserSync.init({
        server: "./_dist"
    });

	gulp.watch("./src/assets/fonts/**/*", ['fonts']);

    gulp.watch("./src/scss/**/*.scss", ['sass']);
	gulp.watch("_dist/**/*.css").on('change', browserSync.reload);


    gulp.watch("./src/*.html", ['html']);
	gulp.watch("_dist/*.html").on('change', browserSync.reload);

});

gulp.task('html',function (){

	return gulp.src(config.src.html.src)
		.pipe(gulp.dest(config.src.html.dist + "/"));

})



// development build task
gulp.task('documentation', function () {
	// define build tasks
	var tasks = [
		'html',
		'stylemack',
		'fonts',
		'colors',
		'sass:documentation'
	];

	// run build
	runSequence(tasks, function () {
		// if (config.dev) {
			//gulp.start('serve');
		// }
		console.log("Built!");
	});
});



// default build task
gulp.task('default', function () {
	// define build tasks
	var tasks = [
		'html',
		'fonts',
		'colors',
		'sass',
		'documentation'
	];

	// run build
	runSequence(tasks, function () {
		// if (config.dev) {
			gulp.start('serve');
		// }
	});

});
